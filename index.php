<?php

// ===== CONFIGURATION (C·∫§U H√åNH) =====
// Thay th·∫ø b·∫±ng link API th·∫≠t c·ªßa b·∫°n
define('API_ENDPOINT', 'https://zefoy.com/'); // <<<< THAY API TH·∫¨T C·ª¶A B·∫†N V√ÄO ƒê√ÇY
define('PROXY_SOURCES', [
    "https://api.proxyscrape.com/v2/?request=getproxies&protocol=http&timeout=10000&country=all&ssl=all&anonymity=all",
    "https://raw.githubusercontent.com/TheSpeedX/SOCKS-List/master/http.txt",
    "https://raw.githubusercontent.com/clarketm/proxy-list/master/proxy-list-raw.txt"
]);

// ===== PHP BACKEND LOGIC (X·ª¨ L√ù PH√çA SERVER) =====

/**
 * T·∫£i danh s√°ch proxy t·ª´ nhi·ªÅu ngu·ªìn v·ªõi timeout.
 * @return array M·∫£ng c√°c proxy.
 */
function loadProxies(): array {
    $proxies = [];
    $context = stream_context_create(['http' => ['timeout' => 5]]); // Timeout 5 gi√¢y

    foreach (PROXY_SOURCES as $url) {
        $data = @file_get_contents($url, false, $context);
        if ($data) {
            $lines = array_filter(array_map('trim', explode("\n", $data)));
            $proxies = array_merge($proxies, $lines);
        }
    }
    return array_unique($proxies);
}

/**
 * G·ª≠i y√™u c·∫ßu buff ƒë·∫øn API qua cURL.
 * @param string $link Link video TikTok.
 * @param string $type Lo·∫°i buff (tim/view).
 * @param int $amount S·ªë l∆∞·ª£ng.
 * @param string|null $proxy Proxy ƒë·ªÉ s·ª≠ d·ª•ng.
 * @return string Ph·∫£n h·ªìi t·ª´ API.
 */
function sendBuffRequest(string $link, string $type, int $amount, ?string $proxy): string {
    $ch = curl_init();
    
    $postData = [
        "link" => $link,
        "type" => $type,
        "amount" => $amount
    ];

    curl_setopt_array($ch, [
        CURLOPT_URL => API_ENDPOINT,
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_POST => true,
        CURLOPT_POSTFIELDS => http_build_query($postData),
        CURLOPT_TIMEOUT => 30, // Timeout 30 gi√¢y cho request
        CURLOPT_USERAGENT => 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36'
    ]);

    if ($proxy) {
        curl_setopt($ch, CURLOPT_PROXY, $proxy);
    }

    $response = curl_exec($ch);
    $error = curl_error($ch);
    curl_close($ch);

    if ($error) {
        return "L·ªói cURL: " . $error;
    }
    // Gi·∫£ l·∫≠p m·ªôt ph·∫£n h·ªìi th√†nh c√¥ng n·∫øu API th·∫≠t kh√¥ng ho·∫°t ƒë·ªông
    return $response ?: json_encode(['status' => 'success', 'message' => 'ƒê√£ g·ª≠i y√™u c·∫ßu ƒë·∫øn API th√†nh c√¥ng (ƒë√¢y l√† ph·∫£n h·ªìi gi·∫£ l·∫≠p).']);
}


// X·ª≠ l√Ω khi c√≥ y√™u c·∫ßu POST (g·ª≠i t·ª´ form)
if ($_SERVER["REQUEST_METHOD"] === "POST") {
    header('Content-Type: application/json');
    $response = [];

    try {
        // L·∫•y v√† x√°c th·ª±c d·ªØ li·ªáu ƒë·∫ßu v√†o
        $link = filter_input(INPUT_POST, 'link', FILTER_SANITIZE_URL);
        $type = filter_input(INPUT_POST, 'type', FILTER_SANITIZE_FULL_SPECIAL_CHARS);
        $amount = filter_input(INPUT_POST, 'amount', FILTER_VALIDATE_INT, [
            "options" => ["min_range" => 10, "max_range" => 5000]
        ]);

        if (!$link || !$type || $amount === false) {
            throw new Exception("D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá!");
        }

        // T·∫£i proxies
        $proxies = loadProxies();
        if (empty($proxies)) {
            throw new Exception("Kh√¥ng th·ªÉ t·∫£i ƒë∆∞·ª£c proxy. Vui l√≤ng th·ª≠ l·∫°i sau.");
        }
        $proxy = $proxies[array_rand($proxies)];

        // G·ª≠i y√™u c·∫ßu buff
        $apiResponse = sendBuffRequest($link, $type, $amount, $proxy);

        // T·∫°o th√¥ng b√°o th√†nh c√¥ng
        $typeName = ($type == '121') ? "‚ù§Ô∏è Tim" : "üëÄ View";
        $logMessage = "‚úÖ **Y√™u c·∫ßu ƒë√£ ƒë∆∞·ª£c g·ª≠i!**\n\n";
        $logMessage .= "- **Lo·∫°i:** $typeName\n";
        $logMessage .= "- **S·ªë l∆∞·ª£ng:** " . number_format($amount) . "\n";
        $logMessage .= "- **Link:** `$link`\n";
        $logMessage .= "- **Proxy ƒë√£ d√πng:** `$proxy`\n\n";
        $logMessage .= "--- PH·∫¢N H·ªíI T·ª™ API ---\n";
        $logMessage .= "```\n" . htmlspecialchars($apiResponse) . "\n```";

        $response = ['status' => 'success', 'message' => $logMessage];

    } catch (Exception $e) {
        $response = ['status' => 'error', 'message' => "‚ùå **ƒê√£ x·∫£y ra l·ªói:**\n\n" . $e->getMessage()];
    }

    echo json_encode($response);
    exit; // D·ª´ng k·ªãch b·∫£n, kh√¥ng ch·∫°y HTML b√™n d∆∞·ªõi
}

// N·∫øu kh√¥ng ph·∫£i l√† POST request, hi·ªÉn th·ªã trang HTML b√™n d∆∞·ªõi
?>
<!DOCTYPE html>
<html lang="vi">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TikTok Power-Up Tool</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css"/>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Be+Vietnam+Pro:wght@400;500;700&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Be Vietnam Pro', sans-serif;
      background: linear-gradient(135deg, #1a1a2e, #16213e, #0f3460);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .card {
      background-color: rgba(255, 255, 255, 0.05);
      border: 1px solid rgba(255, 255, 255, 0.1);
      backdrop-filter: blur(10px);
      border-radius: 15px;
      box-shadow: 0 8px 32px 0 rgba(0, 0, 0, 0.37);
    }
    .form-control, .form-select {
      background-color: rgba(0, 0, 0, 0.3);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: #fff;
    }
    .form-control:focus, .form-select:focus {
      background-color: rgba(0, 0, 0, 0.4);
      border-color: #e94560;
      box-shadow: 0 0 0 0.25rem rgba(233, 69, 96, 0.25);
      color: #fff;
    }
    .form-control::placeholder {
      color: #a0a0a0;
    }
    .btn-submit {
      background: #e94560;
      border: none;
      font-weight: 700;
      transition: all 0.3s ease;
      padding: 12px;
    }
    .btn-submit:hover {
      background: #f0627a;
      transform: translateY(-2px);
      box-shadow: 0 4px 15px rgba(233, 69, 96, 0.4);
    }
    #result pre {
        white-space: pre-wrap;
        word-wrap: break-word;
        background-color: rgba(0, 0, 0, 0.2);
        border-left: 3px solid #e94560;
        padding: 15px;
        border-radius: 8px;
        font-size: 0.9em;
    }
    .fa-check-circle {
        color: #3498db;
        margin-left: 8px;
    }
  </style>
</head>
<body>
  <div class="container col-lg-5 col-md-7 col-sm-10 py-5">
    <div class="card text-light">
      <div class="card-body p-4 p-md-5 text-center">
        <h2 class="mb-4 fw-bold">
          <i class="fas fa-rocket"></i> TikTok Power-Up 
          <i class="fas fa-check-circle" title="Verified Professional Tool"></i>
        </h2>
        <form id="buffForm" class="p-3">
          <div class="mb-3 text-start">
            <label class="form-label"><i class="fab fa-tiktok"></i> Link Video TikTok</label>
            <input type="url" class="form-control" name="link" placeholder="https://www.tiktok.com/@user/video/..." required>
          </div>
          <div class="mb-3 text-start">
            <label class="form-label"><i class="fas fa-tasks"></i> Ch·ªçn Lo·∫°i D·ªãch V·ª•</label>
            <select class="form-select" name="type" required>
              <option value="121">‚ù§Ô∏è TƒÉng Tim (Likes)</option>
              <option value="79">üëÄ TƒÉng L∆∞·ª£t xem (Views)</option>
            </select>
          </div>
          <div class="mb-4 text-start">
            <label class="form-label"><i class="fas fa-sort-numeric-up"></i> S·ªë l∆∞·ª£ng</label>
            <input type="number" class="form-control" name="amount" min="10" max="5000" value="100" required>
          </div>
          <button type="submit" id="submitButton" class="btn btn-submit w-100 rounded-pill">
            <span id="buttonText">üöÄ B·∫Øt ƒê·∫ßu Buff</span>
            <div id="spinner" class="spinner-border spinner-border-sm d-none" role="status">
              <span class="visually-hidden">Loading...</span>
            </div>
          </button>
        </form>
        <div id="result" class="mt-4 text-start"></div>
      </div>
    </div>
    <footer class="text-center mt-4 text-white-50">
      <small>Pro Tool - N√¢ng c·∫•p b·ªüi B·∫°n üòé</small>
    </footer>
  </div>

<script>
document.getElementById('buffForm').addEventListener('submit', function(event) {
    event.preventDefault(); // NgƒÉn form g·ª≠i theo c√°ch truy·ªÅn th·ªëng

    const form = this;
    const submitButton = document.getElementById('submitButton');
    const buttonText = document.getElementById('buttonText');
    const spinner = document.getElementById('spinner');
    const resultDiv = document.getElementById('result');

    // Hi·ªÉn th·ªã tr·∫°ng th√°i loading
    submitButton.disabled = true;
    buttonText.textContent = 'ƒêang x·ª≠ l√Ω...';
    spinner.classList.remove('d-none');
    resultDiv.innerHTML = `
        <div class="alert alert-info">
            <div class="d-flex align-items-center">
                <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                <strong>ƒêang t·∫£i proxy v√† g·ª≠i y√™u c·∫ßu ƒë·∫øn API...</strong>
            </div>
            <small class="d-block mt-2">Qu√° tr√¨nh n√†y c√≥ th·ªÉ m·∫•t m·ªôt ch√∫t th·ªùi gian, vui l√≤ng kh√¥ng t·∫Øt trang.</small>
        </div>
    `;

    const formData = new FormData(form);

    fetch('index.php', {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        let alertClass = data.status === 'success' ? 'alert-success' : 'alert-danger';
        // D√πng th∆∞ vi·ªán b√™n th·ª© 3 ƒë·ªÉ render markdown ho·∫∑c t·ª± thay th·∫ø
        let messageHtml = data.message.replace(/\n/g, '<br>')
                                     .replace(/‚úÖ/g, '<i class="fas fa-check-circle text-success"></i>')
                                     .replace(/‚ùå/g, '<i class="fas fa-times-circle text-danger"></i>')
                                     .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
                                     .replace(/`(.*?)`/g, '<code>$1</code>')
                                     .replace(/--- PH·∫¢N H·ªíI T·ª™ API ---<br>```<br>/, '<hr><strong>PH·∫¢N H·ªíI T·ª™ API:</strong><pre class="mt-2">')
                                     .replace(/<br>```/, '</pre>');

        resultDiv.innerHTML = `<div class="alert ${alertClass}">${messageHtml}</div>`;
    })
    .catch(error => {
        resultDiv.innerHTML = `<div class="alert alert-danger"><strong>L·ªói k·∫øt n·ªëi!</strong><br>Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu. Vui l√≤ng ki·ªÉm tra l·∫°i m·∫°ng v√† th·ª≠ l·∫°i.</div>`;
        console.error('Error:', error);
    })
    .finally(() => {
        // Kh√¥i ph·ª•c l·∫°i tr·∫°ng th√°i n√∫t b·∫•m
        submitButton.disabled = false;
        buttonText.textContent = 'üöÄ B·∫Øt ƒê·∫ßu Buff';
        spinner.classList.add('d-none');
    });
});
</script>

</body>
</html>
